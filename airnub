#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$SCRIPT_DIR"
SUPABASE_DIR="${SUPABASE_DIR:-${REPO_ROOT}/supabase}"
DB_ENV_HELPER="${DB_ENV_HELPER:-${SUPABASE_DIR}/scripts/db-env-local.sh}"
SHARED_SCRIPT="${SHARED_SCRIPT:-${SUPABASE_DIR}/scripts/use-shared-supabase.sh}"
CURRENT_PROJECT_FILE="${CURRENT_PROJECT_FILE:-${SUPABASE_DIR}/.airnub-current-project}"

usage() {
  cat <<'USAGE'
Usage: airnub <command> [subcommand] [options]

Commands:
  env sync          Sync Supabase environment variables to a project .env.local.
  db switch         Apply migrations so the shared Supabase stack matches a project.
  db reset          Reset the shared Supabase database for a project (destructive).
  db status         Show the shared Supabase stack status for a project.
  project use       Sync env vars, run migrations, and show status for a project.
  project current   Display the last project used with `project use`.
  use               Shortcut for `project use`.

Global options:
  -h, --help        Show this help message.

Use "airnub <command> --help" for more information on a command.
USAGE
}

env_usage() {
  cat <<'USAGE'
Usage: airnub env sync [options]

Options:
  --project-dir DIR   Supabase project directory (default: supabase/).
  --status-only       Only refresh env vars if Supabase is already running.
  --ensure-start      Start Supabase if it is not running (default).
USAGE
}

db_usage() {
  cat <<'USAGE'
Usage: airnub db <subcommand> [options] [-- <supabase args>]

Subcommands:
  switch              Apply migrations for the shared Supabase stack.
  reset               Reset the shared Supabase stack (destructive).
  status              Show shared Supabase stack details.

Options:
  --project-dir DIR   Supabase project directory (default: supabase/).

All arguments after "--" are passed directly to the Supabase CLI for the selected subcommand.
USAGE
}

db_switch_usage() {
  cat <<'USAGE'
Usage: airnub db switch [options] [-- <supabase args>]

Options:
  --project-dir DIR   Supabase project directory whose migrations should run (default: supabase/).

All arguments after "--" are forwarded to 'supabase db push'.
USAGE
}

db_reset_usage() {
  cat <<'USAGE'
Usage: airnub db reset [options] [-- <supabase args>]

Options:
  --project-dir DIR   Supabase project directory to reset (default: supabase/).

All arguments after "--" are forwarded to 'supabase db reset'.
USAGE
}

db_status_usage() {
  cat <<'USAGE'
Usage: airnub db status [options] [-- <supabase args>]

Options:
  --project-dir DIR   Supabase project directory to inspect (default: supabase/).

All arguments after "--" are forwarded to 'supabase status'.
USAGE
}

project_usage() {
  cat <<'USAGE'
Usage: airnub project <subcommand> [options]

Subcommands:
  use                 Sync env vars, apply migrations, and show status for a project.
  current             Show the most recent project selected with `project use`.

Run "airnub project <subcommand> --help" for more details.
USAGE
}

project_use_usage() {
  cat <<'USAGE'
Usage: airnub project use [options] <project-dir>

Options:
  --skip-status        Skip the final `supabase status` confirmation step.

Examples:
  airnub project use ./million-dollar-maps
  airnub use ./million-dollar-maps
USAGE
}

project_current_usage() {
  cat <<'USAGE'
Usage: airnub project current

Shows the project directory that was last activated with `airnub project use`.
USAGE
}

die() {
  echo "[airnub] $*" >&2
  exit 1
}

remember_project() {
  local project_dir="$1"
  local output="$project_dir"

  if [[ "$project_dir" == "$REPO_ROOT" ]]; then
    output="."
  elif [[ "$project_dir" == "$REPO_ROOT"/* ]]; then
    local relative="${project_dir#$REPO_ROOT/}"
    output="./${relative}"
  fi

  mkdir -p "$(dirname "$CURRENT_PROJECT_FILE")"
  printf '%s\n' "$output" >"$CURRENT_PROJECT_FILE"
}

show_current_project() {
  if [[ -f "$CURRENT_PROJECT_FILE" ]]; then
    printf 'Last project used: %s\n' "$(<"$CURRENT_PROJECT_FILE")"
  else
    echo "No project has been selected yet. Run 'airnub project use <dir>' first."
  fi
}

resolve_dir() {
  local input="$1"

  if [[ -z "$input" ]]; then
    die "Project directory path is empty"
  fi

  if [[ "$input" == /* ]]; then
    [[ -d "$input" ]] || die "Directory not found: $input"
    (cd "$input" && pwd)
    return
  fi

  if [[ -d "$input" ]]; then
    (cd "$input" && pwd)
    return
  fi

  if [[ -d "${REPO_ROOT}/$input" ]]; then
    (cd "${REPO_ROOT}/$input" && pwd)
    return
  fi

  die "Directory not found: $input"
}

env_command() {
  local action="${1:-}";
  shift || true

  case "$action" in
    sync)
      local ensure_start="true"
      local project_dir=""
      while [[ $# -gt 0 ]]; do
        case "$1" in
          --project-dir)
            [[ $# -lt 2 ]] && die "--project-dir requires a directory"
            project_dir="$(resolve_dir "$2")"
            shift 2
            ;;
          --status-only)
            ensure_start="false"
            shift
            ;;
          --ensure-start)
            ensure_start="true"
            shift
            ;;
          --help|-h)
            env_usage
            return 0
            ;;
          *)
            die "Unknown option for 'airnub env sync': $1"
            ;;
        esac
      done

      [[ -x "$DB_ENV_HELPER" ]] || die "db-env helper not found at $DB_ENV_HELPER"

      local -a cmd=("$DB_ENV_HELPER")
      if [[ "$ensure_start" == "false" ]]; then
        cmd+=("--status-only")
      else
        cmd+=("--ensure-start")
      fi

      local effective_project_dir="${project_dir:-${SUPABASE_DIR}}"

      if [[ -n "$project_dir" ]]; then
        cmd+=("--project-dir" "$project_dir")
      fi

      SUPABASE_PROJECT_DIR="$effective_project_dir" "${cmd[@]}"
      ;;
    --help|-h|"")
      env_usage
      ;;
    *)
      die "Unknown env subcommand: ${action}"
      ;;
  esac
}

run_shared_action() {
  local action="$1"
  local project_dir="$2"
  shift 2 || true

  [[ -x "$SHARED_SCRIPT" ]] || die "shared supabase helper not found at $SHARED_SCRIPT"

  local env_project_dir="${project_dir:-${SUPABASE_DIR}}"
  PROJECT_DIR="$env_project_dir" "$SHARED_SCRIPT" "$action" "$@"
}

db_command() {
  local action="${1:-}";
  shift || true

  case "$action" in
    switch)
      local project_dir=""
      local -a cli_args=()
      while [[ $# -gt 0 ]]; do
        case "$1" in
          --project-dir)
            [[ $# -lt 2 ]] && die "--project-dir requires a directory"
            project_dir="$(resolve_dir "$2")"
            shift 2
            ;;
          --help|-h)
            db_switch_usage
            return 0
            ;;
          --)
            shift
            cli_args+=("$@")
            break
            ;;
          *)
            cli_args+=("$1")
            shift
            ;;
        esac
      done

      run_shared_action push "$project_dir" "${cli_args[@]}"
      ;;
    reset)
      local project_dir=""
      local -a cli_args=()
      while [[ $# -gt 0 ]]; do
        case "$1" in
          --project-dir)
            [[ $# -lt 2 ]] && die "--project-dir requires a directory"
            project_dir="$(resolve_dir "$2")"
            shift 2
            ;;
          --help|-h)
            db_reset_usage
            return 0
            ;;
          --)
            shift
            cli_args+=("$@")
            break
            ;;
          *)
            cli_args+=("$1")
            shift
            ;;
        esac
      done

      run_shared_action reset "$project_dir" "${cli_args[@]}"
      ;;
    status)
      local project_dir=""
      local -a cli_args=()
      while [[ $# -gt 0 ]]; do
        case "$1" in
          --project-dir)
            [[ $# -lt 2 ]] && die "--project-dir requires a directory"
            project_dir="$(resolve_dir "$2")"
            shift 2
            ;;
          --help|-h)
            db_status_usage
            return 0
            ;;
          --)
            shift
            cli_args+=("$@")
            break
            ;;
          *)
            cli_args+=("$1")
            shift
            ;;
        esac
      done

      run_shared_action status "$project_dir" "${cli_args[@]}"
      ;;
    --help|-h|"")
      db_usage
      ;;
    *)
      die "Unknown db subcommand: ${action}"
      ;;
  esac
}

project_command() {
  local action="${1:-}";
  shift || true

  case "$action" in
    use)
      local skip_status="false"
      local project_input=""

      while [[ $# -gt 0 ]]; do
        case "$1" in
          --skip-status)
            skip_status="true"
            shift
            ;;
          --help|-h)
            project_use_usage
            return 0
            ;;
          --project-dir)
            [[ $# -lt 2 ]] && die "--project-dir requires a directory"
            if [[ -n "$project_input" ]]; then
              die "Project directory already provided: $project_input"
            fi
            project_input="$2"
            shift 2
            ;;
          --)
            shift
            if [[ $# -gt 0 ]]; then
              die "Unexpected extra arguments after '--': $*"
            fi
            ;;
          --*)
            die "Unknown option for 'airnub project use': $1"
            ;;
          *)
            if [[ -n "$project_input" ]]; then
              die "Multiple project directories provided: '$project_input' and '$1'"
            fi
            project_input="$1"
            shift
            ;;
        esac
      done

      if [[ -z "$project_input" ]]; then
        die "Project directory is required. See 'airnub project use --help'."
      fi

      local resolved_project
      resolved_project="$(resolve_dir "$project_input")"

      env_command sync --project-dir "$resolved_project"
      db_command switch --project-dir "$resolved_project"
      if [[ "$skip_status" != "true" ]]; then
        db_command status --project-dir "$resolved_project"
      fi

      remember_project "$resolved_project"
      show_current_project
      ;;
    current)
      if [[ $# -gt 0 ]]; then
        case "$1" in
          --help|-h)
            project_current_usage
            return 0
            ;;
          *)
            die "Unknown option for 'airnub project current': $1"
            ;;
        esac
      fi
      show_current_project
      ;;
    --help|-h|"")
      project_usage
      ;;
    *)
      die "Unknown project subcommand: ${action}"
      ;;
  esac
}

main() {
  if [[ $# -eq 0 ]]; then
    usage
    exit 1
  fi

  local command="$1"
  shift

  case "$command" in
    env)
      env_command "$@"
      ;;
    db)
      db_command "$@"
      ;;
    project)
      project_command "$@"
      ;;
    use)
      project_command use "$@"
      ;;
    --help|-h)
      usage
      ;;
    *)
      die "Unknown command: $command"
      ;;
  esac
}

main "$@"
